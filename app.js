import { ethers } from "ethers";

let provider;
let signer;

// ‚úÖ Updated ABI (payable constructor)
const tokenABI = [/* your ABI here */];

// ‚úÖ Bytecode from Remix
const tokenBytecode = "6080604052601260025f6101000a81548160ff021916908360ff160217905550604051610f6d380380610f6d833981810160405281019061004091906103dd565b66038d7ea4c680003414610089576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610080906104e5565b60405180910390fd5b825f9081610097919061070a565b5081600190816100a7919061070a565b5060025f9054906101000a900460ff1660ff16600a6100c69190610935565b816100d1919061097f565b600381905550735def5bd962988d32d85eeae3496dc12dc2eeb31f60055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f606460035461013b91906109ed565b90508060045f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550806003546101ae9190610a1d565b60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3490811502906040515f60405180830381858888f19350505050158015610253573d5f5f3e3d5ffd5b5050505050610a50565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6102bc82610276565b810181811067ffffffffffffffff821117156102db576102da610286565b5b80604052505050565b5f6102ed61025d565b90506102f982826102b3565b919050565b5f67ffffffffffffffff82111561031857610317610286565b5b61032182610276565b9050602081019050919050565b8281835e5f83830152505050565b5f61034e610349846102fe565b6102e4565b90508281526020810184848401111561036a57610369610272565b5b61037584828561032e565b509392505050565b5f82601f8301126103915761039061026e565b5b81516103a184826020860161033c565b91505092915050565b5f819050919050565b6103bc816103aa565b81146103c6575f5ffd5b50565b5f815190506103d7816103b3565b92915050565b5f5f5f606084860312156103f4576103f3610266565b5b5f84015167ffffffffffffffff8111156104115761041061026a565b5b61041d8682870161037d565b935050602084015167ffffffffffffffff81111561043e5761043d61026a565b5b61044a8682870161037d565b925050604061045b868287016103c9565b9150509250925092565b5f82825260208201905092915050565b7f4d7573742070617920302e30303120414254206465706c6f796d656e742066655f8201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b5f6104cf602183610465565b91506104da82610475565b604082019050919050565b5f6020820190508181035f8301526104fc816104c3565b9050919050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061055157607f821691505b6020821081036105645761056361050d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026105c67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261058b565b6105d0868361058b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61060b610606610601846103aa565b6105e8565b6103aa565b9050919050565b5f819050919050565b610624836105f1565b61063861063082610612565b848454610597565b825550505050565b5f5f905090565b61064f610640565b61065a81848461061b565b505050565b5b8181101561067d576106725f82610647565b600181019050610660565b5050565b601f8211156106c2576106938161056a565b61069c8461057c565b810160208510156106ab578190505b6106bf6106b78561057c565b83018261065f565b50505b505050565b5f82821c905092915050565b5f6106e25f19846008026106c7565b1980831691505092915050565b5f6106fa83836106d3565b9150826002028217905092915050565b61071382610503565b67ffffffffffffffff81111561072c5761072b610286565b5b610736825461053a565b610741828285610681565b5f60209050601f831160018114610772575f8415610760578287015190505b61076a85826106ef565b8655506107d1565b601f1984166107808661056a565b5f5b828110156107a757848901518255600182019150602085019450602081019050610782565b868310156107c457848901516107c0601f8916826106d3565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f5f8291508390505b600185111561085b57808604811115610837576108366107d9565b5b60018516156108465780820291505b808102905061085485610806565b945061081b565b94509492505050565b5f82610873576001905061092e565b81610880575f905061092e565b816001811461089657600281146108a0576108cf565b600191505061092e565b60ff8411156108b2576108b16107d9565b5b8360020a9150848211156108c9576108c86107d9565b5b5061092e565b5060208310610133831016604e8410600b84101617156109045782820a9050838111156108ff576108fe6107d9565b5b61092e565b6109118484846001610812565b92509050818404811115610928576109276107d9565b5b81810290505b9392505050565b5f61093f826103aa565b915061094a836103aa565b92506109777fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610864565b905092915050565b5f610989826103aa565b9150610994836103aa565b92508282026109a2816103aa565b915082820484148315176109b9576109b86107d9565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6109f7826103aa565b9150610a02836103aa565b925082610a1257610a116109c0565b5b828204905092915050565b5f610a27826103aa565b9150610a32836103aa565b9250828203905081811115610a4a57610a496107d9565b5b92915050565b61051080610a5d5f395ff3fe608060405234801561000f575f5ffd5b506004361061007b575f3560e01c80634f23daf3116100595780634f23daf3146100d957806370a08231146100f75780638da5cb5b1461012757806395d89b41146101455761007b565b806306fdde031461007f57806318160ddd1461009d578063313ce567146100bb575b5f5ffd5b610087610163565b6040516100949190610347565b60405180910390f35b6100a56101ee565b6040516100b2919061037f565b60405180910390f35b6100c36101f4565b6040516100d091906103b3565b60405180910390f35b6100e1610206565b6040516100ee919061037f565b60405180910390f35b610111600480360381019061010c919061042a565b610211565b60405161011e919061037f565b60405180910390f35b61012f610226565b60405161013c9190610464565b60405180910390f35b61014d61024b565b60405161015a9190610347565b60405180910390f35b5f805461016f906104aa565b80601f016020809104026020016040519081016040528092919081815260200182805461019b906104aa565b80156101e65780601f106101bd576101008083540402835291602001916101e6565b820191905f5260205f20905b8154815290600101906020018083116101c957829003601f168201915b505050505081565b60035481565b60025f9054906101000a900460ff1681565b66038d7ea4c6800081565b6004602052805f5260405f205f915090505481565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054610258906104aa565b80601f0160208091040260200160405190810160405280929190818152602001828054610284906104aa565b80156102cf5780601f106102a6576101008083540402835291602001916102cf565b820191905f5260205f20905b8154815290600101906020018083116102b257829003601f168201915b505050505081565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610319826102d7565b61032381856102e1565b93506103338185602086016102f1565b61033c816102ff565b840191505092915050565b5f6020820190508181035f83015261035f818461030f565b905092915050565b5f819050919050565b61037981610367565b82525050565b5f6020820190506103925f830184610370565b92915050565b5f60ff82169050919050565b6103ad81610398565b82525050565b5f6020820190506103c65f8301846103a4565b92915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103f9826103d0565b9050919050565b610409816103ef565b8114610413575f5ffd5b50565b5f8135905061042481610400565b92915050565b5f6020828403121561043f5761043e6103cc565b5b5f61044c84828501610416565b91505092915050565b61045e816103ef565b82525050565b5f6020820190506104775f830184610455565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806104c157607f821691505b6020821081036104d4576104d361047d565b5b5091905056fea2646970667358221220bfa6780fd05a773ef42e7b7aa12ffc0d3cbd3bc75124744f513008fd9b09b1b564736f6c634300081e0033"; // truncated for readability

// ‚úÖ Switch to Abstract Network (chainId 0xab5)
async function switchToAbstract() {
  const abstractChainId = "0xab5"; // 2741 decimal
  const ethereum = window.ethereum;
  if (!ethereum) throw new Error("MetaMask not detected");

  const currentChainId = await ethereum.request({ method: "eth_chainId" });
  if (currentChainId !== abstractChainId) {
    await ethereum.request({
      method: "wallet_addEthereumChain",
      params: [{
        chainId: abstractChainId,
        chainName: "Abstract",
        rpcUrls: ["https://api.mainnet.abs.xyz"],
        nativeCurrency: { name: "ABT", symbol: "ABT", decimals: 18 },
        blockExplorerUrls: ["https://explorer.abstract.network"]
      }]
    });
    await ethereum.request({
      method: "wallet_switchEthereumChain",
      params: [{ chainId: abstractChainId }]
    });
  }
}

// ‚úÖ Deploy Token
document.getElementById("deployForm").addEventListener("submit", async (e) => {
  e.preventDefault();
  const status = document.getElementById("status");
  status.textContent = "‚è≥ Connecting to wallet...";

  try {
    const ethereum = window.ethereum;
    if (!ethereum) {
      status.textContent = "‚ùå Please install MetaMask or an Abstract-compatible wallet.";
      return;
    }

    // üîπ Request wallet access first
    const accounts = await ethereum.request({ method: "eth_requestAccounts" });
    signer = new ethers.BrowserProvider(ethereum).getSigner(accounts[0]);
    provider = new ethers.BrowserProvider(ethereum);

    // Switch network
    status.textContent = "üåê Switching to Abstract network...";
    await switchToAbstract();

    // Collect input values
    const name = document.getElementById("tokenName").value;
    const symbol = document.getElementById("tokenSymbol").value;
    const supply = document.getElementById("totalSupply").value;

    // Deploy contract
    const factory = new ethers.ContractFactory(tokenABI, tokenBytecode, signer);
    const deployFee = "0.001"; // 0.001 ABT
    status.textContent = `üöÄ Deploying your token... (Fee: ${deployFee} ABT + 1% token share to owner)`;

    const contract = await factory.deploy(name, symbol, supply, {
      value: ethers.parseEther(deployFee)
    });

    status.textContent = "‚è≥ Waiting for deployment confirmation...";
    await contract.waitForDeployment();

    const address = await contract.getAddress();
    status.textContent =
      `‚úÖ Token deployed successfully!\n\n` +
      `üìÑ Address: ${address}\n` +
      `üè∑Ô∏è Name: ${name}\n` +
      `üí† Symbol: ${symbol}\n` +
      `üî¢ Total Supply: ${supply}\n\n` +
      `üí∏ 0.001 ABT fee sent to owner.\n` +
      `üìà Owner automatically received 1% of the new token supply.`;
  } catch (err) {
    console.error(err);
    status.textContent = `‚ùå Error: ${err.message}`;
  }
});
