import { ethers } from "ethers"; const provider = new ethers.BrowserProvider(window.ethereum); // ✅ ABI copied from Remix const tokenABI = [ { "inputs": [ { "internalType": "string", "name": "name_", "type": "string" }, { "internalType": "string", "name": "symbol_", "type": "string" }, { "internalType": "uint256", "name": "initialSupply_", "type": "uint256" } ], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" } ]; // ✅ Bytecode copied from Remix const tokenBytecode = "0x6080604052601260025f6101000a81548160ff021916908360ff16021790555034801561002a575f5ffd5b50604051610c0e380380610c0e833981810160405281019061004c9190610266565b825f908161005a91906104f5565b50816001908161006a91906104f5565b5060025f9054906101000a900460ff1660ff16600a6100899190610720565b81610094919061076a565b60038190555060035460045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505050506107ab565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610145826100ff565b810181811067ffffffffffffffff821117156101645761016361010f565b5b80604052505050565b5f6101766100e6565b9050610182828261013c565b919050565b5f67ffffffffffffffff8211156101a1576101a061010f565b5b6101aa826100ff565b9050602081019050919050565b8281835e5f83830152505050565b5f6101d76101d284610187565b61016d565b9050828152602081018484840111156101f3576101f26100fb565b5b6101fe8482856101b7565b509392505050565b5f82601f83011261021a576102196100f7565b5b815161022a8482602086016101c5565b91505092915050565b5f819050919050565b61024581610233565b811461024f575f5ffd5b50565b5f815190506102608161023c565b92915050565b5f5f5f6060848603121561027d5761027c6100ef565b5b5f84015167ffffffffffffffff81111561029a576102996100f3565b5b6102a686828701610206565b935050602084015167ffffffffffffffff8111156102c7576102c66100f3565b5b6102d386828701610206565b92505060406102e486828701610252565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061033c57607f821691505b60208210810361034f5761034e6102f8565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026103b17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610376565b6103bb8683610376565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6103f66103f16103ec84610233565b6103d3565b610233565b9050919050565b5f819050919050565b61040f836103dc565b61042361041b826103fd565b848454610382565b825550505050565b5f5f905090565b61043a61042b565b610445818484610406565b505050565b5b818110156104685761045d5f82610432565b60018101905061044b565b5050565b601f8211156104ad5761047e81610355565b61048784610367565b81016020851015610496578190505b6104aa6104a285610367565b83018261044a565b50505b505050565b5f82821c905092915050565b5f6104cd5f19846008026104b2565b1980831691505092915050565b5f6104e583836104be565b9150826002028217905092915050565b6104fe826102ee565b67ffffffffffffffff8111156105175761051661010f565b5b6105218254610325565b61052c82828561046c565b5f60209050601f83116001811461055d575f841561054b578287015190505b61055585826104da565b8655506105bc565b601f19841661056b86610355565b5f5b828110156105925784890151825560018201915060208501945060208101905061056d565b868310156105af57848901516105ab601f8916826104be565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f5f8291508390505b600185111561064657808604811115610622576106216105c4565b5b60018516156106315780820291505b808102905061063f856105f1565b9450610606565b94509492505050565b5f8261065e5760019050610719565b8161066b575f9050610719565b8160018114610681576002811461068b576106ba565b6001915050610719565b60ff84111561069d5761069c6105c4565b5b8360020a9150848211156106b4576106b36105c4565b5b50610719565b5060208310610133831016604e8410600b84101617156106ef5782820a9050838111156106ea576106e96105c4565b5b610719565b6106fc84848460016105fd565b92509050818404811115610713576107126105c4565b5b81810290505b9392505050565b5f61072a82610233565b915061073583610233565b92506107627fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461064f565b905092915050565b5f61077482610233565b915061077f83610233565b925082820261078d81610233565b915082820484148315176107a4576107a36105c4565b5b5092915050565b610456806107b85f395ff3fe608060405234801561000f575f5ffd5b5060043610610055575f3560e01c806306fdde031461005957806318160ddd14610077578063313ce5671461009557806370a08231146100b357806395d89b41146100e3575b5f5ffd5b610061610101565b60405161006e91906102b5565b60405180910390f35b61007f61018c565b60405161008c91906102ed565b60405180910390f35b61009d610192565b6040516100aa9190610321565b60405180910390f35b6100cd60048036038101906100c89190610398565b6101a4565b6040516100da91906102ed565b60405180910390f35b6100eb6101b9565b6040516100f891906102b5565b60405180910390f35b5f805461010d906103f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610139906103f0565b80156101845780601f1061015b57610100808354040283529160200191610184565b820191905f5260205f20905b81548152906001019060200180831161016757829003601f168201915b505050505081565b60035481565b60025f9054906101000a900460ff1681565b6004602052805f5260405f205f915090505481565b600180546101c6906103f0565b80601f01602080910402602001604051908101604052809291908181526020018280546101f2906103f0565b801561023d5780601f106102145761010080835404028352916020019161023d565b820191905f5260205f20905b81548152906001019060200180831161022057829003601f168201915b505050505081565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61028782610245565b610291818561024f565b93506102a181856020860161025f565b6102aa8161026d565b840191505092915050565b5f6020820190508181035f8301526102cd818461027d565b905092915050565b5f819050919050565b6102e7816102d5565b82525050565b5f6020820190506103005f8301846102de565b92915050565b5f60ff82169050919050565b61031b81610306565b82525050565b5f6020820190506103345f830184610312565b92915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103678261033e565b9050919050565b6103778161035d565b8114610381575f5ffd5b50565b5f813590506103928161036e565b92915050565b5f602082840312156103ad576103ac61033a565b5b5f6103ba84828501610384565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061040757607f821691505b60208210810361041a576104196103c3565b5b5091905056fea2646970667358221220d9a83650694d2c291c9d6aaa7de005408089a81f7dc1225fe10343e36c98682464736f6c634300081e0033"; // truncated for brevity async function switchToAbstract() { const abstractChainId = "0xab5"; // 2741 in decimal try { const currentChainId = await window.ethereum.request({ method: "eth_chainId" }); if (currentChainId !== abstractChainId) { await window.ethereum.request({ method: "wallet_addEthereumChain", params: [{ chainId: abstractChainId, chainName: "Abstract", rpcUrls: ["https://api.mainnet.abs.xyz"], nativeCurrency: { name: "ABT", symbol: "ABT", decimals: 18 }, blockExplorerUrls: ["https://explorer.abstract.network"] }] }); await window.ethereum.request({ method: "wallet_switchEthereumChain", params: [{ chainId: abstractChainId }] }); } } catch (err) { throw new Error("Failed to switch network: " + err.message); } } document.getElementById("deployForm").addEventListener("submit", async (e) => { e.preventDefault(); const status = document.getElementById("status"); const name = document.getElementById("tokenName").value; const symbol = document.getElementById("tokenSymbol").value; const supply = document.getElementById("totalSupply").value; if (!window.ethereum) { status.textContent = "❌ Please install MetaMask or an Abstract-compatible wallet."; return; } try { // Request wallet connection await window.ethereum.request({ method: "eth_requestAccounts" }); // Switch network first status.textContent = "🌐 Switching to Abstract network..."; await switchToAbstract(); const signer = await provider.getSigner(); const factory = new ethers.ContractFactory(tokenABI, tokenBytecode, signer); status.textContent = "🚀 Deploying your token, please confirm in wallet..."; const contract = await factory.deploy(name, symbol, supply); await contract.waitForDeployment(); const address = await contract.getAddress(); status.textContent = ✅ Token deployed successfully!\n\nAddress: ${address}\nName: ${name}\nSymbol: ${symbol}\nTotal Supply: ${supply}; } catch (err) { console.error(err); status.textContent = ❌ Error: ${err.message}; } }); and my token.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.20; contract SimpleToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping(address => uint256) public balanceOf; constructor(string memory name_, string memory symbol_, uint256 initialSupply_) { name = name_; symbol = symbol_; totalSupply = initialSupply_ * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; } }
